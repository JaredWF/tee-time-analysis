type TestMutationResponse {
  message: String!
}

input TeeTimeChangesInput {
  minReservationTime: String
  maxReservationTime: String
  reservationDayOfWeek: DayOfWeek
  minReservationDate: String
  maxReservationDate: String
  courseName: String
}

type TeeTimeChange {
  id: Int!
  courseName: String!
  priceDollars: Float!
  reservationDate: String!
  reservationDayOfWeek: DayOfWeek!
  reservationTime: String!
  playersAvailable: Int!
  updateDateTime: String!
}

type TeeTimeChangesResponse {
  teeTimeChanges: [TeeTimeChange]!
}

type Query {
  test: String!
  teeTimeChanges(input: TeeTimeChangesInput!): TeeTimeChangesResponse!
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

input AddTeeTimeInput {
  courseName: String!
  reservationDate: String!
  reservationTime: String!
  reservationDayOfWeek: DayOfWeek!
  priceDollars: Float!
  playersAvailable: Int!
}

type Mutation {
  testMutation(testInput: String): TestMutationResponse
  addTeeTimeChanges(teeTimes: [AddTeeTimeInput!]!): [TeeTimeChange]
}